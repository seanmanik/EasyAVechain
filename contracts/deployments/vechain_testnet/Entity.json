{
  "address": "0x83BFE91353A3E773D3149025E002d59C2394558D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "esgAuthority",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "initialName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "initialLocation",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "initialProductDesc",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ESG_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esgScore",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "location",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plasticUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCarbonUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newWaterUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPlasticUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newProduceWeight",
          "type": "uint256"
        }
      ],
      "name": "produce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "produceWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productDescription",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "updatedEsgScore",
          "type": "uint8"
        }
      ],
      "name": "updateEsgScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waterUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7e8535f6156fa9a8d82e417449dc8376db4d77c33f82c5ccecd32f91dbaf49a",
  "receipt": {
    "to": null,
    "from": "0xD170D405684aeEFaFd01c996da83228206558CBA",
    "contractAddress": "0x83BFE91353A3E773D3149025E002d59C2394558D",
    "transactionIndex": 0,
    "gasUsed": "1152520",
    "logsBloom": "0x
    "blockHash": "0x012b7c953a74462fd0249ead8b9aea36e5186fb5e7548dab5aabd3cfb7e9ed6a",
    "transactionHash": "0xa7e8535f6156fa9a8d82e417449dc8376db4d77c33f82c5ccecd32f91dbaf49a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19627157,
        "transactionHash": "0xa7e8535f6156fa9a8d82e417449dc8376db4d77c33f82c5ccecd32f91dbaf49a",
        "address": "0x83BFE91353A3E773D3149025E002d59C2394558D",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x000000000000000000000000d170d405684aeefafd01c996da83228206558cba",
        "logIndex": 0,
        "blockHash": "0x012b7c953a74462fd0249ead8b9aea36e5186fb5e7548dab5aabd3cfb7e9ed6a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19627157,
        "transactionHash": "0xa7e8535f6156fa9a8d82e417449dc8376db4d77c33f82c5ccecd32f91dbaf49a",
        "address": "0x83BFE91353A3E773D3149025E002d59C2394558D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd9",
          "0x00000000000000000000000079c28dde70a1098b724c4b3b50302adc97633fcd",
          "0x000000000000000000000000d170d405684aeefafd01c996da83228206558cba"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x012b7c953a74462fd0249ead8b9aea36e5186fb5e7548dab5aabd3cfb7e9ed6a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19627157,
        "transactionHash": "0xa7e8535f6156fa9a8d82e417449dc8376db4d77c33f82c5ccecd32f91dbaf49a",
        "address": "0x83BFE91353A3E773D3149025E002d59C2394558D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d170d405684aeefafd01c996da83228206558cba",
          "0x000000000000000000000000d170d405684aeefafd01c996da83228206558cba"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x012b7c953a74462fd0249ead8b9aea36e5186fb5e7548dab5aabd3cfb7e9ed6a"
      }
    ],
    "blockNumber": 19627157,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD170D405684aeEFaFd01c996da83228206558CBA",
    "0x79C28Dde70A1098b724c4B3b50302adC97633fCd",
    "0x506574726f54657820526566696e696e6720436f2e0000000000000000000000",
    "0x486f7573746f6e2c2054657861732c2055534100000000000000000000000000",
    "0x457468796c656e6520284e61747572616c206761732900000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "10160fd4595809a0c676b8eb590f28ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"esgAuthority\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"initialName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initialLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initialProductDesc\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ESG_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esgScore\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"location\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plasticUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCarbonUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newWaterUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPlasticUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProduceWeight\",\"type\":\"uint256\"}],\"name\":\"produce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"produceWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productDescription\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"updatedEsgScore\",\"type\":\"uint8\"}],\"name\":\"updateEsgScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waterUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Entity.sol\":\"Entity\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Entity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\npragma solidity ^0.8.20;\\n\\ncontract Entity is AccessControl {\\n\\n    bytes32 public constant ESG_MANAGER_ROLE = keccak256(\\\"ESG_MANAGER_ROLE\\\");\\n\\n    bytes32 public name;\\n    bytes32 public location; \\n    bytes32 public productDescription;\\n    uint256 public carbonUsage;\\n    uint256 public waterUsage;\\n    uint256 public plasticUsage;\\n    uint256 public produceWeight;\\n    uint8 public esgScore;\\n\\n    // Constructor to initialize the contract\\n    constructor(address entity, address esgAuthority, bytes32 initialName, bytes32 initialLocation, bytes32 initialProductDesc) {\\n        name = initialName;\\n        location = initialLocation;\\n        productDescription = initialProductDesc;\\n        // carbonUsage = 0;\\n        // waterUsage = 0;\\n        // plasticUsage = 0;\\n        // produceWeight = 0;\\n        // esgScore = 0;\\n        _grantRole(ESG_MANAGER_ROLE, esgAuthority);\\n        _grantRole(DEFAULT_ADMIN_ROLE, entity);\\n    }\\n\\n    // Function to update production statistics\\n    function produce(uint256 newCarbonUsage, uint256 newWaterUsage, uint256 newPlasticUsage, uint256 newProduceWeight) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        carbonUsage += newCarbonUsage;\\n        waterUsage += newWaterUsage;\\n        plasticUsage += newPlasticUsage;\\n        produceWeight += newProduceWeight;\\n    }\\n\\n    // Function to update ESG score\\n    function updateEsgScore(uint8 updatedEsgScore) public onlyRole(ESG_MANAGER_ROLE) {\\n        require(updatedEsgScore <= 5, \\\"ESG score must be 5 or lower\\\");\\n        esgScore = updatedEsgScore;\\n    }\\n}\\n\",\"keccak256\":\"0x65016045485c5a9297ac3e6e7f315b4d2aea4779fd78a8dde3fd5067100239b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001131380380620011318339818101604052810190620000379190620002ba565b8260018190555081600281905550806003819055506200007e7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd985620000a060201b60201c565b50620000946000801b86620000a060201b60201c565b50505050505062000342565b6000620000b48383620001a360201b60201c565b6200019857600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001346200020d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200019d565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000247826200021a565b9050919050565b62000259816200023a565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b6000819050919050565b62000294816200027f565b8114620002a057600080fd5b50565b600081519050620002b48162000289565b92915050565b600080600080600060a08688031215620002d957620002d862000215565b5b6000620002e98882890162000268565b9550506020620002fc8882890162000268565b94505060406200030f88828901620002a3565b93505060606200032288828901620002a3565b92505060806200033588828901620002a3565b9150509295509295909350565b610ddf80620003526000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063516f279e116100a257806391d148541161007157806391d14854146102bd578063a217fddf146102ed578063c0ceb4741461030b578063d547741f14610329578063d6526b951461034557610116565b8063516f279e146102455780635e240859146102635780636cef4a7f146102815780638a30f8cc1461029f57610116565b80632abb6544116100e95780632abb6544146101b55780632cb82c91146101d35780632f2ff15d146101ef57806336568abe1461020b578063470ddff01461022757610116565b806301ffc9a71461011b57806306fdde031461014b5780630ab72bf114610169578063248a9ca314610185575b600080fd5b610135600480360381019061013091906109ac565b610363565b60405161014291906109f4565b60405180910390f35b6101536103dd565b6040516101609190610a28565b60405180910390f35b610183600480360381019061017e9190610a7c565b6103e3565b005b61019f600480360381019061019a9190610ad5565b610473565b6040516101ac9190610a28565b60405180910390f35b6101bd610492565b6040516101ca9190610b1b565b60405180910390f35b6101ed60048036038101906101e89190610b62565b610498565b005b61020960048036038101906102049190610c27565b610510565b005b61022560048036038101906102209190610c27565b610532565b005b61022f6105ad565b60405161023c9190610b1b565b60405180910390f35b61024d6105b3565b60405161025a9190610a28565b60405180910390f35b61026b6105b9565b6040516102789190610b1b565b60405180910390f35b6102896105bf565b6040516102969190610a28565b60405180910390f35b6102a76105e3565b6040516102b49190610a28565b60405180910390f35b6102d760048036038101906102d29190610c27565b6105e9565b6040516102e491906109f4565b60405180910390f35b6102f5610653565b6040516103029190610a28565b60405180910390f35b61031361065a565b6040516103209190610c76565b60405180910390f35b610343600480360381019061033e9190610c27565b61066d565b005b61034d61068f565b60405161035a9190610b1b565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103d657506103d582610695565b5b9050919050565b60015481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd961040d816106ff565b60058260ff161115610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90610cee565b60405180910390fd5b81600860006101000a81548160ff021916908360ff1602179055505050565b6000806000838152602001908152602001600020600101549050919050565b60055481565b6000801b6104a5816106ff565b84600460008282546104b79190610d3d565b9250508190555083600560008282546104d09190610d3d565b9250508190555082600660008282546104e99190610d3d565b9250508190555081600760008282546105029190610d3d565b925050819055505050505050565b61051982610473565b610522816106ff565b61052c8383610713565b50505050565b61053a610804565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461059e576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105a8828261080c565b505050565b60065481565b60025481565b60075481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd981565b60035481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b600860009054906101000a900460ff1681565b61067682610473565b61067f816106ff565b610689838361080c565b50505050565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6107108161070b610804565b6108fe565b50565b600061071f83836105e9565b6107f957600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610796610804565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506107fe565b600090505b92915050565b600033905090565b600061081883836105e9565b156108f357600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610890610804565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506108f8565b600090505b92915050565b61090882826105e9565b61094b5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401610942929190610d80565b60405180910390fd5b5050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61098981610954565b811461099457600080fd5b50565b6000813590506109a681610980565b92915050565b6000602082840312156109c2576109c161094f565b5b60006109d084828501610997565b91505092915050565b60008115159050919050565b6109ee816109d9565b82525050565b6000602082019050610a0960008301846109e5565b92915050565b6000819050919050565b610a2281610a0f565b82525050565b6000602082019050610a3d6000830184610a19565b92915050565b600060ff82169050919050565b610a5981610a43565b8114610a6457600080fd5b50565b600081359050610a7681610a50565b92915050565b600060208284031215610a9257610a9161094f565b5b6000610aa084828501610a67565b91505092915050565b610ab281610a0f565b8114610abd57600080fd5b50565b600081359050610acf81610aa9565b92915050565b600060208284031215610aeb57610aea61094f565b5b6000610af984828501610ac0565b91505092915050565b6000819050919050565b610b1581610b02565b82525050565b6000602082019050610b306000830184610b0c565b92915050565b610b3f81610b02565b8114610b4a57600080fd5b50565b600081359050610b5c81610b36565b92915050565b60008060008060808587031215610b7c57610b7b61094f565b5b6000610b8a87828801610b4d565b9450506020610b9b87828801610b4d565b9350506040610bac87828801610b4d565b9250506060610bbd87828801610b4d565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf482610bc9565b9050919050565b610c0481610be9565b8114610c0f57600080fd5b50565b600081359050610c2181610bfb565b92915050565b60008060408385031215610c3e57610c3d61094f565b5b6000610c4c85828601610ac0565b9250506020610c5d85828601610c12565b9150509250929050565b610c7081610a43565b82525050565b6000602082019050610c8b6000830184610c67565b92915050565b600082825260208201905092915050565b7f4553472073636f7265206d7573742062652035206f72206c6f77657200000000600082015250565b6000610cd8601c83610c91565b9150610ce382610ca2565b602082019050919050565b60006020820190508181036000830152610d0781610ccb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4882610b02565b9150610d5383610b02565b9250828201905080821115610d6b57610d6a610d0e565b5b92915050565b610d7a81610be9565b82525050565b6000604082019050610d956000830185610d71565b610da26020830184610a19565b939250505056fea2646970667358221220b188ded777a6f6be2e1a6ae473d54b4fb650f10d0b028bdaff48824d66b2c66a64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063516f279e116100a257806391d148541161007157806391d14854146102bd578063a217fddf146102ed578063c0ceb4741461030b578063d547741f14610329578063d6526b951461034557610116565b8063516f279e146102455780635e240859146102635780636cef4a7f146102815780638a30f8cc1461029f57610116565b80632abb6544116100e95780632abb6544146101b55780632cb82c91146101d35780632f2ff15d146101ef57806336568abe1461020b578063470ddff01461022757610116565b806301ffc9a71461011b57806306fdde031461014b5780630ab72bf114610169578063248a9ca314610185575b600080fd5b610135600480360381019061013091906109ac565b610363565b60405161014291906109f4565b60405180910390f35b6101536103dd565b6040516101609190610a28565b60405180910390f35b610183600480360381019061017e9190610a7c565b6103e3565b005b61019f600480360381019061019a9190610ad5565b610473565b6040516101ac9190610a28565b60405180910390f35b6101bd610492565b6040516101ca9190610b1b565b60405180910390f35b6101ed60048036038101906101e89190610b62565b610498565b005b61020960048036038101906102049190610c27565b610510565b005b61022560048036038101906102209190610c27565b610532565b005b61022f6105ad565b60405161023c9190610b1b565b60405180910390f35b61024d6105b3565b60405161025a9190610a28565b60405180910390f35b61026b6105b9565b6040516102789190610b1b565b60405180910390f35b6102896105bf565b6040516102969190610a28565b60405180910390f35b6102a76105e3565b6040516102b49190610a28565b60405180910390f35b6102d760048036038101906102d29190610c27565b6105e9565b6040516102e491906109f4565b60405180910390f35b6102f5610653565b6040516103029190610a28565b60405180910390f35b61031361065a565b6040516103209190610c76565b60405180910390f35b610343600480360381019061033e9190610c27565b61066d565b005b61034d61068f565b60405161035a9190610b1b565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103d657506103d582610695565b5b9050919050565b60015481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd961040d816106ff565b60058260ff161115610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90610cee565b60405180910390fd5b81600860006101000a81548160ff021916908360ff1602179055505050565b6000806000838152602001908152602001600020600101549050919050565b60055481565b6000801b6104a5816106ff565b84600460008282546104b79190610d3d565b9250508190555083600560008282546104d09190610d3d565b9250508190555082600660008282546104e99190610d3d565b9250508190555081600760008282546105029190610d3d565b925050819055505050505050565b61051982610473565b610522816106ff565b61052c8383610713565b50505050565b61053a610804565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461059e576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105a8828261080c565b505050565b60065481565b60025481565b60075481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd981565b60035481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b600860009054906101000a900460ff1681565b61067682610473565b61067f816106ff565b610689838361080c565b50505050565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6107108161070b610804565b6108fe565b50565b600061071f83836105e9565b6107f957600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610796610804565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506107fe565b600090505b92915050565b600033905090565b600061081883836105e9565b156108f357600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610890610804565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506108f8565b600090505b92915050565b61090882826105e9565b61094b5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401610942929190610d80565b60405180910390fd5b5050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61098981610954565b811461099457600080fd5b50565b6000813590506109a681610980565b92915050565b6000602082840312156109c2576109c161094f565b5b60006109d084828501610997565b91505092915050565b60008115159050919050565b6109ee816109d9565b82525050565b6000602082019050610a0960008301846109e5565b92915050565b6000819050919050565b610a2281610a0f565b82525050565b6000602082019050610a3d6000830184610a19565b92915050565b600060ff82169050919050565b610a5981610a43565b8114610a6457600080fd5b50565b600081359050610a7681610a50565b92915050565b600060208284031215610a9257610a9161094f565b5b6000610aa084828501610a67565b91505092915050565b610ab281610a0f565b8114610abd57600080fd5b50565b600081359050610acf81610aa9565b92915050565b600060208284031215610aeb57610aea61094f565b5b6000610af984828501610ac0565b91505092915050565b6000819050919050565b610b1581610b02565b82525050565b6000602082019050610b306000830184610b0c565b92915050565b610b3f81610b02565b8114610b4a57600080fd5b50565b600081359050610b5c81610b36565b92915050565b60008060008060808587031215610b7c57610b7b61094f565b5b6000610b8a87828801610b4d565b9450506020610b9b87828801610b4d565b9350506040610bac87828801610b4d565b9250506060610bbd87828801610b4d565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf482610bc9565b9050919050565b610c0481610be9565b8114610c0f57600080fd5b50565b600081359050610c2181610bfb565b92915050565b60008060408385031215610c3e57610c3d61094f565b5b6000610c4c85828601610ac0565b9250506020610c5d85828601610c12565b9150509250929050565b610c7081610a43565b82525050565b6000602082019050610c8b6000830184610c67565b92915050565b600082825260208201905092915050565b7f4553472073636f7265206d7573742062652035206f72206c6f77657200000000600082015250565b6000610cd8601c83610c91565b9150610ce382610ca2565b602082019050919050565b60006020820190508181036000830152610d0781610ccb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4882610b02565b9150610d5383610b02565b9250828201905080821115610d6b57610d6a610d0e565b5b92915050565b610d7a81610be9565b82525050565b6000604082019050610d956000830185610d71565b610da26020830184610a19565b939250505056fea2646970667358221220b188ded777a6f6be2e1a6ae473d54b4fb650f10d0b028bdaff48824d66b2c66a64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/Entity.sol:Entity",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 456,
        "contract": "contracts/Entity.sol:Entity",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 458,
        "contract": "contracts/Entity.sol:Entity",
        "label": "location",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 460,
        "contract": "contracts/Entity.sol:Entity",
        "label": "productDescription",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 462,
        "contract": "contracts/Entity.sol:Entity",
        "label": "carbonUsage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 464,
        "contract": "contracts/Entity.sol:Entity",
        "label": "waterUsage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 466,
        "contract": "contracts/Entity.sol:Entity",
        "label": "plasticUsage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 468,
        "contract": "contracts/Entity.sol:Entity",
        "label": "produceWeight",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 470,
        "contract": "contracts/Entity.sol:Entity",
        "label": "esgScore",
        "offset": 0,
        "slot": "8",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/Entity.sol:Entity",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/Entity.sol:Entity",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}