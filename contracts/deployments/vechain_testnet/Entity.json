{
  "address": "0x6DBd4775283cE56B3501c9bce2037a8Eb65F5Ef3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "esgAuthority",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "initialName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "initialLocation",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "initialProductDesc",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "evaluatedEsgScore",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ESG_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esgScore",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "location",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plasticUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCarbonUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newWaterUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPlasticUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newProduceWeight",
          "type": "uint256"
        }
      ],
      "name": "produce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "produceWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productDescription",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "updatedEsgScore",
          "type": "uint8"
        }
      ],
      "name": "updateEsgScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waterUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x86289ab641db603deffc55843baaf3749b75f448da6667e60d03b6806708562f",
  "receipt": {
    "to": null,
    "from": "0xF20E0Cb052361c55e235FF20929a6660CE705abf",
    "contractAddress": "0x6DBd4775283cE56B3501c9bce2037a8Eb65F5Ef3",
    "transactionIndex": 0,
    "gasUsed": "1215503",
    "logsBloom": "0x
    "blockHash": "0x012b850b03b7c7a1574324c2b5498a9eb23e04fd79a6e4aef4a7a6d050b86e14",
    "transactionHash": "0x86289ab641db603deffc55843baaf3749b75f448da6667e60d03b6806708562f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19629323,
        "transactionHash": "0x86289ab641db603deffc55843baaf3749b75f448da6667e60d03b6806708562f",
        "address": "0x6DBd4775283cE56B3501c9bce2037a8Eb65F5Ef3",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x000000000000000000000000f20e0cb052361c55e235ff20929a6660ce705abf",
        "logIndex": 0,
        "blockHash": "0x012b850b03b7c7a1574324c2b5498a9eb23e04fd79a6e4aef4a7a6d050b86e14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19629323,
        "transactionHash": "0x86289ab641db603deffc55843baaf3749b75f448da6667e60d03b6806708562f",
        "address": "0x6DBd4775283cE56B3501c9bce2037a8Eb65F5Ef3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd9",
          "0x00000000000000000000000079c28dde70a1098b724c4b3b50302adc97633fcd",
          "0x000000000000000000000000f20e0cb052361c55e235ff20929a6660ce705abf"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x012b850b03b7c7a1574324c2b5498a9eb23e04fd79a6e4aef4a7a6d050b86e14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19629323,
        "transactionHash": "0x86289ab641db603deffc55843baaf3749b75f448da6667e60d03b6806708562f",
        "address": "0x6DBd4775283cE56B3501c9bce2037a8Eb65F5Ef3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f20e0cb052361c55e235ff20929a6660ce705abf",
          "0x000000000000000000000000f20e0cb052361c55e235ff20929a6660ce705abf"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x012b850b03b7c7a1574324c2b5498a9eb23e04fd79a6e4aef4a7a6d050b86e14"
      }
    ],
    "blockNumber": 19629323,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF20E0Cb052361c55e235FF20929a6660CE705abf",
    "0x79C28Dde70A1098b724c4B3b50302adC97633fCd",
    "0x4e54554320466169727072696365000000000000000000000000000000000000",
    "0x53696e6761706f72650000000000000000000000000000000000000000000000",
    "0x446173616e6920776174657220626f74746c6573000000000000000000000000",
    82
  ],
  "numDeployments": 11,
  "solcInputHash": "8084371b9b5c1bcddb3f5edec280d94d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"esgAuthority\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"initialName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initialLocation\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initialProductDesc\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"evaluatedEsgScore\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ESG_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esgScore\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"location\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plasticUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCarbonUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newWaterUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPlasticUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProduceWeight\",\"type\":\"uint256\"}],\"name\":\"produce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"produceWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productDescription\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"updatedEsgScore\",\"type\":\"uint8\"}],\"name\":\"updateEsgScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waterUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Entity.sol\":\"Entity\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Entity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\npragma solidity ^0.8.20;\\n\\ncontract Entity is AccessControl {\\n\\n    bytes32 public constant ESG_MANAGER_ROLE = keccak256(\\\"ESG_MANAGER_ROLE\\\");\\n\\n    bytes32 public name;\\n    bytes32 public location; \\n    bytes32 public productDescription;\\n    uint256 public carbonUsage;\\n    uint256 public waterUsage;\\n    uint256 public plasticUsage;\\n    uint256 public produceWeight;\\n    uint8 public esgScore;\\n    uint256 public lastUpdated;\\n\\n    // Constructor to initialize the contract\\n    constructor(address entity, address esgAuthority, bytes32 initialName, bytes32 initialLocation, bytes32 initialProductDesc, uint8 evaluatedEsgScore) {\\n        name = initialName;\\n        location = initialLocation;\\n        productDescription = initialProductDesc;\\n        _grantRole(ESG_MANAGER_ROLE, esgAuthority);\\n        _grantRole(DEFAULT_ADMIN_ROLE, entity);\\n        lastUpdated = block.timestamp;\\n        esgScore = evaluatedEsgScore;\\n    }\\n\\n    // Function to update production statistics\\n    function produce(uint256 newCarbonUsage, uint256 newWaterUsage, uint256 newPlasticUsage, uint256 newProduceWeight) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        carbonUsage += newCarbonUsage;\\n        waterUsage += newWaterUsage;\\n        plasticUsage += newPlasticUsage;\\n        produceWeight += newProduceWeight;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    // Function to update ESG score\\n    function updateEsgScore(uint8 updatedEsgScore) public onlyRole(ESG_MANAGER_ROLE) {\\n        require(updatedEsgScore <= 100, \\\"ESG score must be 100 or lower\\\");\\n        esgScore = updatedEsgScore;\\n        lastUpdated = block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc63ff8924b2b9ab8c3d86f2217393dfe0aaedbe7fc638ae8f5dd338690a7dec0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011e3380380620011e383398181016040528101906200003791906200031b565b8360018190555082600281905550816003819055506200007e7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd986620000c360201b60201c565b50620000946000801b87620000c360201b60201c565b504260098190555080600860006101000a81548160ff021916908360ff160217905550505050505050620003b7565b6000620000d78383620001c660201b60201c565b620001bb57600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001576200023060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050620001c0565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026a826200023d565b9050919050565b6200027c816200025d565b81146200028857600080fd5b50565b6000815190506200029c8162000271565b92915050565b6000819050919050565b620002b781620002a2565b8114620002c357600080fd5b50565b600081519050620002d781620002ac565b92915050565b600060ff82169050919050565b620002f581620002dd565b81146200030157600080fd5b50565b6000815190506200031581620002ea565b92915050565b60008060008060008060c087890312156200033b576200033a62000238565b5b60006200034b89828a016200028b565b96505060206200035e89828a016200028b565b95505060406200037189828a01620002c6565b94505060606200038489828a01620002c6565b93505060806200039789828a01620002c6565b92505060a0620003aa89828a0162000304565b9150509295509295509295565b610e1c80620003c76000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063516f279e116100ad578063a217fddf11610071578063a217fddf146102f8578063c0ceb47414610316578063d0b06f5d14610334578063d547741f14610352578063d6526b951461036e57610121565b8063516f279e146102505780635e2408591461026e5780636cef4a7f1461028c5780638a30f8cc146102aa57806391d14854146102c857610121565b80632abb6544116100f45780632abb6544146101c05780632cb82c91146101de5780632f2ff15d146101fa57806336568abe14610216578063470ddff01461023257610121565b806301ffc9a71461012657806306fdde03146101565780630ab72bf114610174578063248a9ca314610190575b600080fd5b610140600480360381019061013b91906109e9565b61038c565b60405161014d9190610a31565b60405180910390f35b61015e610406565b60405161016b9190610a65565b60405180910390f35b61018e60048036038101906101899190610ab9565b61040c565b005b6101aa60048036038101906101a59190610b12565b6104a3565b6040516101b79190610a65565b60405180910390f35b6101c86104c2565b6040516101d59190610b58565b60405180910390f35b6101f860048036038101906101f39190610b9f565b6104c8565b005b610214600480360381019061020f9190610c64565b610547565b005b610230600480360381019061022b9190610c64565b610569565b005b61023a6105e4565b6040516102479190610b58565b60405180910390f35b6102586105ea565b6040516102659190610a65565b60405180910390f35b6102766105f0565b6040516102839190610b58565b60405180910390f35b6102946105f6565b6040516102a19190610a65565b60405180910390f35b6102b261061a565b6040516102bf9190610a65565b60405180910390f35b6102e260048036038101906102dd9190610c64565b610620565b6040516102ef9190610a31565b60405180910390f35b61030061068a565b60405161030d9190610a65565b60405180910390f35b61031e610691565b60405161032b9190610cb3565b60405180910390f35b61033c6106a4565b6040516103499190610b58565b60405180910390f35b61036c60048036038101906103679190610c64565b6106aa565b005b6103766106cc565b6040516103839190610b58565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ff57506103fe826106d2565b5b9050919050565b60015481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd96104368161073c565b60648260ff16111561047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490610d2b565b60405180910390fd5b81600860006101000a81548160ff021916908360ff160217905550426009819055505050565b6000806000838152602001908152602001600020600101549050919050565b60055481565b6000801b6104d58161073c565b84600460008282546104e79190610d7a565b9250508190555083600560008282546105009190610d7a565b9250508190555082600660008282546105199190610d7a565b9250508190555081600760008282546105329190610d7a565b92505081905550426009819055505050505050565b610550826104a3565b6105598161073c565b6105638383610750565b50505050565b610571610841565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105d5576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105df8282610849565b505050565b60065481565b60025481565b60075481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd981565b60035481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b600860009054906101000a900460ff1681565b60095481565b6106b3826104a3565b6106bc8161073c565b6106c68383610849565b50505050565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61074d81610748610841565b61093b565b50565b600061075c8383610620565b61083657600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506107d3610841565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061083b565b600090505b92915050565b600033905090565b60006108558383610620565b1561093057600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506108cd610841565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050610935565b600090505b92915050565b6109458282610620565b6109885780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161097f929190610dbd565b60405180910390fd5b5050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6109c681610991565b81146109d157600080fd5b50565b6000813590506109e3816109bd565b92915050565b6000602082840312156109ff576109fe61098c565b5b6000610a0d848285016109d4565b91505092915050565b60008115159050919050565b610a2b81610a16565b82525050565b6000602082019050610a466000830184610a22565b92915050565b6000819050919050565b610a5f81610a4c565b82525050565b6000602082019050610a7a6000830184610a56565b92915050565b600060ff82169050919050565b610a9681610a80565b8114610aa157600080fd5b50565b600081359050610ab381610a8d565b92915050565b600060208284031215610acf57610ace61098c565b5b6000610add84828501610aa4565b91505092915050565b610aef81610a4c565b8114610afa57600080fd5b50565b600081359050610b0c81610ae6565b92915050565b600060208284031215610b2857610b2761098c565b5b6000610b3684828501610afd565b91505092915050565b6000819050919050565b610b5281610b3f565b82525050565b6000602082019050610b6d6000830184610b49565b92915050565b610b7c81610b3f565b8114610b8757600080fd5b50565b600081359050610b9981610b73565b92915050565b60008060008060808587031215610bb957610bb861098c565b5b6000610bc787828801610b8a565b9450506020610bd887828801610b8a565b9350506040610be987828801610b8a565b9250506060610bfa87828801610b8a565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c3182610c06565b9050919050565b610c4181610c26565b8114610c4c57600080fd5b50565b600081359050610c5e81610c38565b92915050565b60008060408385031215610c7b57610c7a61098c565b5b6000610c8985828601610afd565b9250506020610c9a85828601610c4f565b9150509250929050565b610cad81610a80565b82525050565b6000602082019050610cc86000830184610ca4565b92915050565b600082825260208201905092915050565b7f4553472073636f7265206d75737420626520313030206f72206c6f7765720000600082015250565b6000610d15601e83610cce565b9150610d2082610cdf565b602082019050919050565b60006020820190508181036000830152610d4481610d08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8582610b3f565b9150610d9083610b3f565b9250828201905080821115610da857610da7610d4b565b5b92915050565b610db781610c26565b82525050565b6000604082019050610dd26000830185610dae565b610ddf6020830184610a56565b939250505056fea26469706673582212206ea6a6db8034b0584d1b3c862178bf4a73cdb5c27f9789986af4da1c8b15815064736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063516f279e116100ad578063a217fddf11610071578063a217fddf146102f8578063c0ceb47414610316578063d0b06f5d14610334578063d547741f14610352578063d6526b951461036e57610121565b8063516f279e146102505780635e2408591461026e5780636cef4a7f1461028c5780638a30f8cc146102aa57806391d14854146102c857610121565b80632abb6544116100f45780632abb6544146101c05780632cb82c91146101de5780632f2ff15d146101fa57806336568abe14610216578063470ddff01461023257610121565b806301ffc9a71461012657806306fdde03146101565780630ab72bf114610174578063248a9ca314610190575b600080fd5b610140600480360381019061013b91906109e9565b61038c565b60405161014d9190610a31565b60405180910390f35b61015e610406565b60405161016b9190610a65565b60405180910390f35b61018e60048036038101906101899190610ab9565b61040c565b005b6101aa60048036038101906101a59190610b12565b6104a3565b6040516101b79190610a65565b60405180910390f35b6101c86104c2565b6040516101d59190610b58565b60405180910390f35b6101f860048036038101906101f39190610b9f565b6104c8565b005b610214600480360381019061020f9190610c64565b610547565b005b610230600480360381019061022b9190610c64565b610569565b005b61023a6105e4565b6040516102479190610b58565b60405180910390f35b6102586105ea565b6040516102659190610a65565b60405180910390f35b6102766105f0565b6040516102839190610b58565b60405180910390f35b6102946105f6565b6040516102a19190610a65565b60405180910390f35b6102b261061a565b6040516102bf9190610a65565b60405180910390f35b6102e260048036038101906102dd9190610c64565b610620565b6040516102ef9190610a31565b60405180910390f35b61030061068a565b60405161030d9190610a65565b60405180910390f35b61031e610691565b60405161032b9190610cb3565b60405180910390f35b61033c6106a4565b6040516103499190610b58565b60405180910390f35b61036c60048036038101906103679190610c64565b6106aa565b005b6103766106cc565b6040516103839190610b58565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ff57506103fe826106d2565b5b9050919050565b60015481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd96104368161073c565b60648260ff16111561047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490610d2b565b60405180910390fd5b81600860006101000a81548160ff021916908360ff160217905550426009819055505050565b6000806000838152602001908152602001600020600101549050919050565b60055481565b6000801b6104d58161073c565b84600460008282546104e79190610d7a565b9250508190555083600560008282546105009190610d7a565b9250508190555082600660008282546105199190610d7a565b9250508190555081600760008282546105329190610d7a565b92505081905550426009819055505050505050565b610550826104a3565b6105598161073c565b6105638383610750565b50505050565b610571610841565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105d5576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105df8282610849565b505050565b60065481565b60025481565b60075481565b7f328ea31eb72cc9b0141cc07a0c522af89b254f0025b0b6f77b1cf6dc0ed9cbd981565b60035481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b600860009054906101000a900460ff1681565b60095481565b6106b3826104a3565b6106bc8161073c565b6106c68383610849565b50505050565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61074d81610748610841565b61093b565b50565b600061075c8383610620565b61083657600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506107d3610841565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061083b565b600090505b92915050565b600033905090565b60006108558383610620565b1561093057600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506108cd610841565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050610935565b600090505b92915050565b6109458282610620565b6109885780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161097f929190610dbd565b60405180910390fd5b5050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6109c681610991565b81146109d157600080fd5b50565b6000813590506109e3816109bd565b92915050565b6000602082840312156109ff576109fe61098c565b5b6000610a0d848285016109d4565b91505092915050565b60008115159050919050565b610a2b81610a16565b82525050565b6000602082019050610a466000830184610a22565b92915050565b6000819050919050565b610a5f81610a4c565b82525050565b6000602082019050610a7a6000830184610a56565b92915050565b600060ff82169050919050565b610a9681610a80565b8114610aa157600080fd5b50565b600081359050610ab381610a8d565b92915050565b600060208284031215610acf57610ace61098c565b5b6000610add84828501610aa4565b91505092915050565b610aef81610a4c565b8114610afa57600080fd5b50565b600081359050610b0c81610ae6565b92915050565b600060208284031215610b2857610b2761098c565b5b6000610b3684828501610afd565b91505092915050565b6000819050919050565b610b5281610b3f565b82525050565b6000602082019050610b6d6000830184610b49565b92915050565b610b7c81610b3f565b8114610b8757600080fd5b50565b600081359050610b9981610b73565b92915050565b60008060008060808587031215610bb957610bb861098c565b5b6000610bc787828801610b8a565b9450506020610bd887828801610b8a565b9350506040610be987828801610b8a565b9250506060610bfa87828801610b8a565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c3182610c06565b9050919050565b610c4181610c26565b8114610c4c57600080fd5b50565b600081359050610c5e81610c38565b92915050565b60008060408385031215610c7b57610c7a61098c565b5b6000610c8985828601610afd565b9250506020610c9a85828601610c4f565b9150509250929050565b610cad81610a80565b82525050565b6000602082019050610cc86000830184610ca4565b92915050565b600082825260208201905092915050565b7f4553472073636f7265206d75737420626520313030206f72206c6f7765720000600082015250565b6000610d15601e83610cce565b9150610d2082610cdf565b602082019050919050565b60006020820190508181036000830152610d4481610d08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8582610b3f565b9150610d9083610b3f565b9250828201905080821115610da857610da7610d4b565b5b92915050565b610db781610c26565b82525050565b6000604082019050610dd26000830185610dae565b610ddf6020830184610a56565b939250505056fea26469706673582212206ea6a6db8034b0584d1b3c862178bf4a73cdb5c27f9789986af4da1c8b15815064736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/Entity.sol:Entity",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 456,
        "contract": "contracts/Entity.sol:Entity",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 458,
        "contract": "contracts/Entity.sol:Entity",
        "label": "location",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 460,
        "contract": "contracts/Entity.sol:Entity",
        "label": "productDescription",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 462,
        "contract": "contracts/Entity.sol:Entity",
        "label": "carbonUsage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 464,
        "contract": "contracts/Entity.sol:Entity",
        "label": "waterUsage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 466,
        "contract": "contracts/Entity.sol:Entity",
        "label": "plasticUsage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 468,
        "contract": "contracts/Entity.sol:Entity",
        "label": "produceWeight",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 470,
        "contract": "contracts/Entity.sol:Entity",
        "label": "esgScore",
        "offset": 0,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 472,
        "contract": "contracts/Entity.sol:Entity",
        "label": "lastUpdated",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/Entity.sol:Entity",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/Entity.sol:Entity",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}